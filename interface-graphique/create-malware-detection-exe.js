const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîß Cr√©ation de l\'ex√©cutable Malware Detection Interface...\n');

// V√©rifier si les fichiers n√©cessaires existent
const requiredFiles = [
    'malware-detection-interface.html',
    'package.json'
];

console.log('üìã V√©rification des fichiers requis...');
for (const file of requiredFiles) {
    if (fs.existsSync(file)) {
        console.log(`‚úÖ ${file} - TROUV√â`);
    } else {
        console.log(`‚ùå ${file} - MANQUANT`);
        console.log('‚ùå Impossible de cr√©er l\'ex√©cutable sans les fichiers requis');
        process.exit(1);
    }
}

// Cr√©er le fichier main.js pour Electron
console.log('\nüìù Cr√©ation du fichier main.js pour Electron...');
const mainJsContent = `const { app, BrowserWindow, Menu, ipcMain } = require('electron');
const path = require('path');

let mainWindow;

function createWindow() {
    // Cr√©er la fen√™tre du navigateur
    mainWindow = new BrowserWindow({
        width: 1400,
        height: 900,
        minWidth: 1200,
        minHeight: 800,
        icon: path.join(__dirname, 'assets', 'icon.ico'),
        webPreferences: {
            nodeIntegration: true,
            contextIsolation: false,
            enableRemoteModule: true
        },
        title: 'La Machine √âthique - D√©tection de Malware',
        show: false,
        backgroundColor: '#1a1a1a'
    });

    // Charger l'interface de d√©tection de malware
    mainWindow.loadFile('malware-detection-interface.html');

    // Afficher la fen√™tre quand elle est pr√™te
    mainWindow.once('ready-to-show', () => {
        mainWindow.show();
        console.log('üöÄ Interface de d√©tection de malware charg√©e');
    });

    // G√©rer la fermeture de la fen√™tre
    mainWindow.on('closed', () => {
        mainWindow = null;
    });

    // Ouvrir les outils de d√©veloppement en mode d√©veloppement
    if (process.env.NODE_ENV === 'development') {
        mainWindow.webContents.openDevTools();
    }
}

// Cr√©er le menu de l'application
function createMenu() {
    const template = [
        {
            label: 'Fichier',
            submenu: [
                {
                    label: 'Nouveau Scan',
                    accelerator: 'CmdOrCtrl+N',
                    click: () => {
                        mainWindow.webContents.send('new-scan');
                    }
                },
                {
                    label: 'Scan Complet',
                    accelerator: 'CmdOrCtrl+Shift+S',
                    click: () => {
                        mainWindow.webContents.send('full-scan');
                    }
                },
                { type: 'separator' },
                {
                    label: 'Quitter',
                    accelerator: process.platform === 'darwin' ? 'Cmd+Q' : 'Ctrl+Q',
                    click: () => {
                        app.quit();
                    }
                }
            ]
        },
        {
            label: '√âdition',
            submenu: [
                { role: 'undo' },
                { role: 'redo' },
                { type: 'separator' },
                { role: 'cut' },
                { role: 'copy' },
                { role: 'paste' }
            ]
        },
        {
            label: 'Affichage',
            submenu: [
                { role: 'reload' },
                { role: 'forceReload' },
                { role: 'toggleDevTools' },
                { type: 'separator' },
                { role: 'resetZoom' },
                { role: 'zoomIn' },
                { role: 'zoomOut' },
                { type: 'separator' },
                { role: 'togglefullscreen' }
            ]
        },
        {
            label: 'S√©curit√©',
            submenu: [
                {
                    label: 'Quarantaine d\'Urgence',
                    accelerator: 'CmdOrCtrl+Shift+Q',
                    click: () => {
                        mainWindow.webContents.send('emergency-quarantine');
                    }
                },
                {
                    label: 'Protocole d\'Urgence',
                    accelerator: 'CmdOrCtrl+Shift+P',
                    click: () => {
                        mainWindow.webContents.send('emergency-protocol');
                    }
                },
                {
                    label: 'Arr√™t d\'Urgence',
                    accelerator: 'CmdOrCtrl+Shift+X',
                    click: () => {
                        mainWindow.webContents.send('emergency-shutdown');
                    }
                }
            ]
        },
        {
            label: 'Aide',
            submenu: [
                {
                    label: '√Ä propos de La Machine √âthique',
                    click: () => {
                        require('electron').dialog.showMessageBox(mainWindow, {
                            type: 'info',
                            title: 'La Machine √âthique',
                            message: 'La Machine √âthique - D√©tection de Malware',
                            detail: 'Syst√®me de s√©curit√© avanc√© inspir√© de Person of Interest\\n\\nVersion: 1.0.0\\nD√©velopp√© avec des contr√¥les √©thiques int√©gr√©s'
                        });
                    }
                }
            ]
        }
    ];

    const menu = Menu.buildFromTemplate(template);
    Menu.setApplicationMenu(menu);
}

// √âv√©nements de l'application
app.whenReady().then(() => {
    createWindow();
    createMenu();

    app.on('activate', () => {
        if (BrowserWindow.getAllWindows().length === 0) {
            createWindow();
        }
    });
});

app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

// Gestion des √©v√©nements IPC
ipcMain.on('log-event', (event, data) => {
    console.log('üìã √âv√©nement:', data);
});

ipcMain.on('malware-detected', (event, malwareType) => {
    console.log('üö® Malware d√©tect√©:', malwareType);
    // Ici vous pourriez ajouter des notifications syst√®me
});

ipcMain.on('scan-complete', (event, results) => {
    console.log('‚úÖ Scan termin√©:', results);
});

// Gestion des erreurs
process.on('uncaughtException', (error) => {
    console.error('‚ùå Erreur non g√©r√©e:', error);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Promesse rejet√©e non g√©r√©e:', reason);
});
`;

fs.writeFileSync('main-malware-detection.js', mainJsContent);
console.log('‚úÖ main-malware-detection.js cr√©√©');

// Cr√©er le package.json pour l'ex√©cutable
console.log('\nüì¶ Cr√©ation du package.json pour l\'ex√©cutable...');
const packageJson = {
    "name": "la-machine-ethique-malware-detection",
    "version": "1.0.0",
    "description": "La Machine √âthique - Interface de D√©tection de Malware",
    "main": "main-malware-detection.js",
    "scripts": {
        "start": "electron .",
        "build": "electron-builder",
        "dist": "electron-builder --publish=never"
    },
    "build": {
        "appId": "com.lamachineethique.malwaredetection",
        "productName": "La Machine √âthique - D√©tection de Malware",
        "directories": {
            "output": "dist-malware-detection"
        },
        "files": [
            "main-malware-detection.js",
            "malware-detection-interface.html",
            "assets/**/*",
            "node_modules/**/*"
        ],
        "win": {
            "target": "portable",
            "icon": "assets/icon.ico"
        },
        "portable": {
            "artifactName": "La-Machine-Ethique-Malware-Detection.exe"
        }
    },
    "devDependencies": {
        "electron": "^25.0.0",
        "electron-builder": "^24.0.0"
    }
};

fs.writeFileSync('package-malware-detection.json', JSON.stringify(packageJson, null, 2));
console.log('‚úÖ package-malware-detection.json cr√©√©');

// Cr√©er le dossier assets s'il n'existe pas
if (!fs.existsSync('assets')) {
    fs.mkdirSync('assets');
    console.log('‚úÖ Dossier assets cr√©√©');
}

// Cr√©er un fichier d'ic√¥ne simple (placeholder)
console.log('\nüé® Cr√©ation de l\'ic√¥ne...');
const iconContent = `<!-- Placeholder pour l'ic√¥ne -->
<!-- Vous pouvez remplacer ce fichier par une vraie ic√¥ne .ico -->
`;
fs.writeFileSync('assets/icon.ico', iconContent);
console.log('‚úÖ Ic√¥ne cr√©√©e (placeholder)');

// Installer les d√©pendances
console.log('\nüì¶ Installation des d√©pendances...');
try {
    execSync('npm install electron electron-builder --save-dev', { stdio: 'inherit' });
    console.log('‚úÖ D√©pendances install√©es');
} catch (error) {
    console.log('‚ö†Ô∏è Erreur lors de l\'installation des d√©pendances, tentative avec le package.json existant...');
    try {
        execSync('npm install', { stdio: 'inherit' });
        console.log('‚úÖ D√©pendances install√©es avec le package.json existant');
    } catch (error2) {
        console.log('‚ùå Impossible d\'installer les d√©pendances');
        console.log('üí° Vous pouvez essayer manuellement: npm install electron electron-builder --save-dev');
    }
}

// Construire l'ex√©cutable
console.log('\nüî® Construction de l\'ex√©cutable...');
try {
    execSync('npx electron-builder --config package-malware-detection.json --win portable', { stdio: 'inherit' });
    console.log('‚úÖ Ex√©cutable cr√©√© avec succ√®s!');
    
    // V√©rifier si l'ex√©cutable a √©t√© cr√©√©
    const exePath = 'dist-malware-detection/La-Machine-Ethique-Malware-Detection.exe';
    if (fs.existsSync(exePath)) {
        const stats = fs.statSync(exePath);
        const fileSizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
        console.log(`üìÅ Ex√©cutable cr√©√©: ${exePath}`);
        console.log(`üìä Taille: ${fileSizeInMB} MB`);
        
        // Cr√©er un script de lancement pour l'ex√©cutable
        const launchScript = `@echo off
title La Machine Ethique - Malware Detection (Executable)
color 0B

echo.
echo ========================================
echo    LA MACHINE ETHIQUE - MALWARE DETECTION
echo ========================================
echo.
echo [INFO] Lancement de l'executable...
echo.

if exist "dist-malware-detection\\La-Machine-Ethique-Malware-Detection.exe" (
    echo [SUCCES] Executable trouve
    echo [INFO] Lancement de l'application...
    start "" "dist-malware-detection\\La-Machine-Ethique-Malware-Detection.exe"
    echo [SUCCES] Application lancee avec succes!
) else (
    echo [ERREUR] Executable introuvable
    echo [INFO] Verifiez que la compilation s'est bien passee
)

echo.
echo [INFO] Appuyez sur une touche pour fermer...
pause >nul
`;
        
        fs.writeFileSync('LAUNCH-MALWARE-DETECTION-EXE.bat', launchScript);
        console.log('‚úÖ Script de lancement LAUNCH-MALWARE-DETECTION-EXE.bat cr√©√©');
        
    } else {
        console.log('‚ùå L\'ex√©cutable n\'a pas √©t√© cr√©√©');
    }
    
} catch (error) {
    console.log('‚ùå Erreur lors de la construction de l\'ex√©cutable');
    console.log('üí° Essayez de lancer manuellement: npx electron-builder --config package-malware-detection.json --win portable');
}

console.log('\nüéâ Processus de cr√©ation termin√©!');
console.log('\nüìã Fichiers cr√©√©s:');
console.log('‚úÖ main-malware-detection.js - Fichier principal Electron');
console.log('‚úÖ package-malware-detection.json - Configuration de build');
console.log('‚úÖ assets/icon.ico - Ic√¥ne de l\'application');
console.log('‚úÖ LAUNCH-MALWARE-DETECTION-EXE.bat - Script de lancement');

console.log('\nüöÄ Pour lancer l\'ex√©cutable:');
console.log('1. Double-cliquez sur LAUNCH-MALWARE-DETECTION-EXE.bat');
console.log('2. Ou naviguez vers dist-malware-detection/ et lancez La-Machine-Ethique-Malware-Detection.exe'); 